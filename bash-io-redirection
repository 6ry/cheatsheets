sources:
http://tldp.org/LDP/abs/html/io-redirection.html
http://mixedvolume.blogspot.com/2004/12/file-descriptors-in-bourne-shell.html

# =====================================

1>filename
   # Redirect stdout to file "filename."

1>>filename
   # Redirect and append stdout to file "filename."

2>filename
   # Redirect stderr to file "filename."

2>>filename
   # Redirect and append stderr to file "filename."

&>filename
   # Redirect both stdout and stderr to file "filename."
   # This operator is now functional, as of Bash 4, final release.

M>N
  # "M" is a file descriptor, which defaults to 1, if not explicitly set.
  # "N" is a filename.
  # File descriptor "M" is redirect to file "N."

M>&N
  # "M" is a file descriptor, which defaults to 1, if not set.
  # "N" is another file descriptor.

i>&j
   # Redirects file descriptor i to j.
   # All output of file pointed to by i gets sent to file pointed to by j.

>&j
   # Redirects, by default, file descriptor 1 (stdout) to j.
   # All stdout gets sent to file pointed to by j.

0< FILENAME
 < FILENAME
   # Accept input from a file.
   # Companion command to ">", and often used in combination with it.
   #
   # grep search-word <filename

[j]<>filename
   #  Open file "filename" for reading and writing,
   #+ and assign file descriptor "j" to it.
   #  If "filename" does not exist, create it.
   #  If file descriptor "j" is not specified, default to fd 0, stdin.

|
   # Pipe.
   # General purpose process and command chaining tool.
   # Similar to ">", but more general in effect.
   # Useful for chaining commands, scripts, files, and programs together.
   cat *.txt | sort | uniq > result-file
   # Sorts the output of all the .txt files and deletes duplicate lines,
   # finally saves results to "result-file".

# =====================================

Closing File Descriptors

n<&-
Close input file descriptor n.

0<&-, <&-
Close stdin.

n>&-
Close output file descriptor n.

1>&-, >&-
Close stdout.


# =====================================
# Examples
# =====================================

# Appends both stdout and stderr to the file "filename"
command >>filename 2>&1

# Sends stderr through a pipe.
command 2>&1 | awk '{print $5}'
# |& was added to Bash 4 as an abbreviation for 2>&.

# =====================================

Multiple output streams may be redirected to one file.
ls -yz >> command.log 2>&1
#  Capture result of illegal options "yz" in file "command.log."
#  Because stderr is redirected to the file,
#+ any error messages will also be there.

#  Note, however, that the following does *not* give the same result.
ls -yz 2>&1 >> command.log
#  Outputs an error message and does not write to file.

#  If redirecting both stdout and stderr,
#+ the order of the commands makes a difference.

# =====================================

# An application of [j]<>filename:
# Writing at a specified place in a file.

echo 1234567890 > File    # Write string to "File".
exec 3<> File             # Open "File" and assign fd 3 to it.
read -n 4 <&3             # Read only 4 characters.
echo -n . >&3             # Write a decimal point there.
exec 3>&-                 # Close fd 3.
cat File                  # ==> 1234.67890

# =====================================

#  **Note**:
#  Child processes inherit open file descriptors. This is why pipes work.
#+ To prevent an fd from being inherited, close it.

# Redirecting ONLY stderr to a pipe.

exec 3>&1                              # Save current "value" of stdout.
ls -l 2>&1 >&3 3>&- | grep bad 3>&-    # Close fd 3 for 'grep' (but not 'ls').
#              ^^^^   ^^^^
exec 3>&-                              # Now close it for the remainder of the script.

# =====================================

# Swap stdout and stderr for `command'
# (for demo purpose only; useless)

command 3>&1 1>&2 2>&3 3>&-

# Equivalent to the following steps:
# dup2(1,3)
# dup2(2,1)
# dup2(3,2)
# close(3)

